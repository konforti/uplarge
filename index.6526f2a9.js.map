{"mappings":"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","sources":["<anon>","docs/index.js","src/UpLarge.js"],"sourcesContent":["let $05af1e91c7a6ffa3$var$cloudName, $05af1e91c7a6ffa3$var$publicId, $05af1e91c7a6ffa3$var$uploadPreset, $05af1e91c7a6ffa3$var$chunkSize, $05af1e91c7a6ffa3$var$xUniqueUploadId, $05af1e91c7a6ffa3$var$chunkCount, $05af1e91c7a6ffa3$var$totalChunks, $05af1e91c7a6ffa3$var$file, $05af1e91c7a6ffa3$var$fileSize, $05af1e91c7a6ffa3$var$fromByte, $05af1e91c7a6ffa3$var$toByte, $05af1e91c7a6ffa3$var$retries, $05af1e91c7a6ffa3$var$retriesCount, $05af1e91c7a6ffa3$var$eventTarget;\nfunction $05af1e91c7a6ffa3$var$UpLarge(props) {\n    $05af1e91c7a6ffa3$var$xUniqueUploadId = +new Date();\n    $05af1e91c7a6ffa3$var$publicId = props && props.publicId || $05af1e91c7a6ffa3$var$xUniqueUploadId;\n    $05af1e91c7a6ffa3$var$cloudName = props && props.cloudName || \"demo\";\n    $05af1e91c7a6ffa3$var$uploadPreset = props && props.uploadPreset || \"unsigned\";\n    $05af1e91c7a6ffa3$var$chunkSize = 6000000; // Bytes (must be larger than 5,000,000)\n    $05af1e91c7a6ffa3$var$fromByte = 0;\n    $05af1e91c7a6ffa3$var$toByte = 0;\n    $05af1e91c7a6ffa3$var$chunkCount = 0;\n    $05af1e91c7a6ffa3$var$retries = 3;\n    $05af1e91c7a6ffa3$var$retriesCount = 0;\n    $05af1e91c7a6ffa3$var$eventTarget = new EventTarget();\n    return {\n        emitter: $05af1e91c7a6ffa3$var$eventTarget,\n        uploadFile: $05af1e91c7a6ffa3$var$uploadFile\n    };\n}\nfunction $05af1e91c7a6ffa3$var$uploadFile(fileToUpload) {\n    if (!fileToUpload) return new TypeError(\"The file is missing\");\n    $05af1e91c7a6ffa3$var$file = fileToUpload;\n    $05af1e91c7a6ffa3$var$fileSize = $05af1e91c7a6ffa3$var$file.size;\n    $05af1e91c7a6ffa3$var$totalChunks = Math.ceil($05af1e91c7a6ffa3$var$fileSize / $05af1e91c7a6ffa3$var$chunkSize);\n    $05af1e91c7a6ffa3$var$processFile();\n}\nfunction $05af1e91c7a6ffa3$var$processFile(retry = false) {\n    $05af1e91c7a6ffa3$var$toByte = $05af1e91c7a6ffa3$var$fromByte + parseInt($05af1e91c7a6ffa3$var$chunkSize);\n    if ($05af1e91c7a6ffa3$var$toByte > $05af1e91c7a6ffa3$var$fileSize) $05af1e91c7a6ffa3$var$toByte = $05af1e91c7a6ffa3$var$fileSize;\n    let part = $05af1e91c7a6ffa3$var$file.slice($05af1e91c7a6ffa3$var$fromByte, $05af1e91c7a6ffa3$var$toByte);\n    if (!retry) $05af1e91c7a6ffa3$var$chunkCount++;\n    send(part, $05af1e91c7a6ffa3$var$fromByte, $05af1e91c7a6ffa3$var$toByte - 1, $05af1e91c7a6ffa3$var$fileSize).then((res)=>{\n        if (parseInt(res.status / 100) === 2) {\n            $05af1e91c7a6ffa3$var$retriesCount = 0;\n            if ($05af1e91c7a6ffa3$var$toByte < $05af1e91c7a6ffa3$var$fileSize) {\n                $05af1e91c7a6ffa3$var$fromByte = $05af1e91c7a6ffa3$var$toByte;\n                $05af1e91c7a6ffa3$var$processFile();\n            } else $05af1e91c7a6ffa3$var$eventTarget.dispatchEvent(new CustomEvent(\"success\", {\n                detail: {\n                    response: JSON.parse(res.response)\n                }\n            }));\n        } else if ($05af1e91c7a6ffa3$var$retriesCount++ <= $05af1e91c7a6ffa3$var$retries) $05af1e91c7a6ffa3$var$processFile(true);\n    }).catch((error)=>{\n        console.error(error);\n    });\n    function send(part, fromByte, toByte, fileSize) {\n        let formdata = new FormData();\n        formdata.append(\"file\", part);\n        formdata.append(\"upload_preset\", $05af1e91c7a6ffa3$var$uploadPreset);\n        formdata.append(\"cloud_name\", $05af1e91c7a6ffa3$var$cloudName);\n        formdata.append(\"public_id\", $05af1e91c7a6ffa3$var$publicId);\n        let xhr = new XMLHttpRequest();\n        return new Promise(function(resolve, reject) {\n            xhr.onload = ()=>{\n                // Fired when an XMLHttpRequest transaction completes successfully\n                if (xhr.readyState !== 4) return; // Only run if the request is complete (4 == Done)\n                if (parseInt(xhr.status / 100) === 2) resolve(xhr);\n                else reject({\n                    status: xhr.status,\n                    statusText: xhr.statusText\n                });\n            };\n            xhr.open(\"POST\", `https://api.cloudinary.com/v1_1/${$05af1e91c7a6ffa3$var$cloudName}/auto/upload`);\n            xhr.timeout = 3600000;\n            xhr.setRequestHeader(\"X-Unique-Upload-Id\", $05af1e91c7a6ffa3$var$xUniqueUploadId);\n            xhr.setRequestHeader(\"Content-Range\", `bytes ${fromByte}-${toByte}/${fileSize}`);\n            xhr.upload.onloadstart = function() {\n            // Fired when a request has started to load data\n            };\n            xhr.onloadend = function() {\n            // Fired when a request has been completed, whether successfully (after load) or unsuccessfully (after abort or error)\n            };\n            xhr.upload.onabort = function() {\n            // Fired when a request has been aborted, for example, because the program called XMLHttpRequest.abort().\n            };\n            xhr.upload.onprogress = function(event) {\n                // Fired periodically when a request receives more data\n                let total = Math.max(event.total, fileSize);\n                let uploaded = ($05af1e91c7a6ffa3$var$chunkCount - 1) * $05af1e91c7a6ffa3$var$chunkSize + event.loaded;\n                let percent = uploaded / total * 100;\n                $05af1e91c7a6ffa3$var$eventTarget.dispatchEvent(new CustomEvent(\"progress\", {\n                    detail: {\n                        percent: percent\n                    }\n                }));\n            };\n            xhr.upload.ontimeout = function() {\n            // Fired when progress is terminated due to preset time expiring\n            };\n            xhr.upload.onerror = function(event) {\n                $05af1e91c7a6ffa3$var$eventTarget.dispatchEvent(new CustomEvent(\"error\", {\n                    detail: {\n                        status: xhr.status,\n                        message: event.target.responseText\n                    }\n                }));\n                reject({\n                    status: xhr.status,\n                    statusText: xhr.statusText\n                });\n            };\n            xhr.send(formdata);\n        });\n    }\n}\nvar $05af1e91c7a6ffa3$export$2e2bcd8739ae039 = $05af1e91c7a6ffa3$var$UpLarge;\n\n\nfunction $8bfe43a2def9b0db$var$upload(file) {\n    let props = {\n        cloudName: \"dxuiuruim\",\n        uploadPreset: \"unsigned\"\n    };\n    let upLarge = (0, $05af1e91c7a6ffa3$export$2e2bcd8739ae039)(props);\n    upLarge.uploadFile(file);\n    upLarge.emitter.addEventListener(\"progress\", (evt)=>{\n        document.getElementById(\"progress\").value = Math.round(evt.detail.percent);\n        document.getElementById(\"status\").innerHTML = `${Math.round(evt.detail.percent)}%`;\n    });\n    upLarge.emitter.addEventListener(\"success\", (evt)=>{\n        let res = evt.detail.response;\n        let url = res.playback_url;\n        if (res.resource_type !== \"video\") url = res.secure_url;\n        document.getElementById(\"url\").innerHTML = url;\n        document.getElementById(\"url\").href = url;\n    });\n    upLarge.emitter.addEventListener(\"error\", (evt)=>{\n        document.getElementById(\"status\").innerHTML = `Error during the upload: [${evt.detail.status}] ${evt.detail.message}.`;\n    });\n}\nlet $8bfe43a2def9b0db$var$picker = document.getElementById(\"picker\");\n$8bfe43a2def9b0db$var$picker.addEventListener(\"change\", (e)=>{\n    $8bfe43a2def9b0db$var$upload($8bfe43a2def9b0db$var$picker.files[0]);\n});\nlet $8bfe43a2def9b0db$var$container = document.querySelector(\".container\");\n$8bfe43a2def9b0db$var$container.addEventListener(\"dragenter\", (e)=>{\n    e.preventDefault();\n    e.stopPropagation();\n    $8bfe43a2def9b0db$var$container.classList.add(\"active\");\n}, false);\n$8bfe43a2def9b0db$var$container.addEventListener(\"dragleave\", (e)=>{\n    e.preventDefault();\n    e.stopPropagation();\n    $8bfe43a2def9b0db$var$container.classList.remove(\"active\");\n}, false);\n$8bfe43a2def9b0db$var$container.addEventListener(\"dragover\", (e)=>{\n    e.preventDefault();\n    e.stopPropagation();\n    $8bfe43a2def9b0db$var$container.classList.add(\"active\");\n}, false);\n$8bfe43a2def9b0db$var$container.addEventListener(\"drop\", (e)=>{\n    e.preventDefault();\n    e.stopPropagation();\n    $8bfe43a2def9b0db$var$container.classList.remove(\"active\");\n    let draggedData = e.dataTransfer;\n    $8bfe43a2def9b0db$var$upload(draggedData.files[0]);\n}, false);\n\n\n//# sourceMappingURL=index.6526f2a9.js.map\n","import UpLarge from \"../src/UpLarge\";\n\nfunction upload(file) {\n  let props = {\n    cloudName: \"dxuiuruim\",\n    uploadPreset: \"unsigned\"\n  };\n  let upLarge = UpLarge(props);\n  upLarge.uploadFile(file);\n\n  upLarge.emitter.addEventListener(\"progress\", (evt) => {\n    document.getElementById(\"progress\").value = Math.round(evt.detail.percent);\n    document.getElementById(\"status\").innerHTML = `${Math.round(\n      evt.detail.percent\n    )}%`;\n  });\n  upLarge.emitter.addEventListener(\"success\", (evt) => {\n    let res = evt.detail.response;\n    let url = res.playback_url;\n    if (res.resource_type !== \"video\") {\n      url = res.secure_url;\n    }\n    document.getElementById(\"url\").innerHTML = url;\n    document.getElementById(\"url\").href = url;\n  });\n  upLarge.emitter.addEventListener(\"error\", (evt) => {\n    document.getElementById(\n      \"status\"\n    ).innerHTML = `Error during the upload: [${evt.detail.status}] ${evt.detail.message}.`;\n  });\n}\n\nlet picker = document.getElementById(\"picker\");\npicker.addEventListener(\"change\", (e) => {\n  upload(picker.files[0]);\n});\n\nlet container = document.querySelector(\".container\");\ncontainer.addEventListener(\n  \"dragenter\",\n  (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    container.classList.add(\"active\");\n  },\n  false\n);\n\ncontainer.addEventListener(\n  \"dragleave\",\n  (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    container.classList.remove(\"active\");\n  },\n  false\n);\n\ncontainer.addEventListener(\n  \"dragover\",\n  (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    container.classList.add(\"active\");\n  },\n  false\n);\n\ncontainer.addEventListener(\n  \"drop\",\n  (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    container.classList.remove(\"active\");\n    let draggedData = e.dataTransfer;\n    upload(draggedData.files[0]);\n  },\n  false\n);\n","let cloudName,\n  publicId,\n  uploadPreset,\n  chunkSize,\n  xUniqueUploadId,\n  chunkCount,\n  totalChunks,\n  file,\n  fileSize,\n  fromByte,\n  toByte,\n  retries,\n  retriesCount,\n  eventTarget;\n\nfunction UpLarge(props) {\n  xUniqueUploadId = +new Date();\n  publicId = (props && props.publicId) || xUniqueUploadId;\n  cloudName = (props && props.cloudName) || \"demo\";\n  uploadPreset = (props && props.uploadPreset) || \"unsigned\";\n  chunkSize = 6000000; // Bytes (must be larger than 5,000,000)\n  fromByte = 0;\n  toByte = 0;\n  chunkCount = 0;\n  retries = 3;\n  retriesCount = 0;\n  eventTarget = new EventTarget();\n  return {\n    emitter: eventTarget,\n    uploadFile: uploadFile\n  };\n}\n\nfunction uploadFile(fileToUpload) {\n  if (!fileToUpload) {\n    return new TypeError(\"The file is missing\");\n  }\n  file = fileToUpload;\n  fileSize = file.size;\n  totalChunks = Math.ceil(fileSize / chunkSize);\n  processFile();\n}\n\nfunction processFile(retry = false) {\n  toByte = fromByte + parseInt(chunkSize);\n  if (toByte > fileSize) {\n    toByte = fileSize;\n  }\n  let part = file.slice(fromByte, toByte);\n  if (!retry) {\n    chunkCount++;\n  }\n  send(part, fromByte, toByte - 1, fileSize)\n    .then((res) => {\n      if (parseInt(res.status / 100) === 2) {\n        retriesCount = 0;\n        if (toByte < fileSize) {\n          fromByte = toByte;\n          processFile();\n        } else {\n          eventTarget.dispatchEvent(\n            new CustomEvent(\"success\", {\n              detail: { response: JSON.parse(res.response) }\n            })\n          );\n        }\n      } else if (retriesCount++ <= retries) {\n        processFile(true);\n      }\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n\n  function send(part, fromByte, toByte, fileSize) {\n    let formdata = new FormData();\n    formdata.append(\"file\", part);\n    formdata.append(\"upload_preset\", uploadPreset);\n    formdata.append(\"cloud_name\", cloudName);\n    formdata.append(\"public_id\", publicId);\n\n    let xhr = new XMLHttpRequest();\n\n    return new Promise(function (resolve, reject) {\n      xhr.onload = () => {\n        // Fired when an XMLHttpRequest transaction completes successfully\n        if (xhr.readyState !== 4) {\n          return; // Only run if the request is complete (4 == Done)\n        }\n        if (parseInt(xhr.status / 100) === 2) {\n          resolve(xhr);\n        } else {\n          reject({\n            status: xhr.status,\n            statusText: xhr.statusText\n          });\n        }\n      };\n\n      xhr.open(\n        \"POST\",\n        `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`\n      );\n      xhr.timeout = 60 * 60 * 1000;\n      xhr.setRequestHeader(\"X-Unique-Upload-Id\", xUniqueUploadId);\n      xhr.setRequestHeader(\n        \"Content-Range\",\n        `bytes ${fromByte}-${toByte}/${fileSize}`\n      );\n      xhr.upload.onloadstart = function () {\n        // Fired when a request has started to load data\n      };\n\n      xhr.onloadend = function () {\n        // Fired when a request has been completed, whether successfully (after load) or unsuccessfully (after abort or error)\n      };\n\n      xhr.upload.onabort = function () {\n        // Fired when a request has been aborted, for example, because the program called XMLHttpRequest.abort().\n      };\n\n      xhr.upload.onprogress = function (event) {\n        // Fired periodically when a request receives more data\n        let total = Math.max(event.total, fileSize);\n        let uploaded = (chunkCount - 1) * chunkSize + event.loaded;\n        let percent = (uploaded / total) * 100;\n        eventTarget.dispatchEvent(\n          new CustomEvent(\"progress\", { detail: { percent: percent } })\n        );\n      };\n\n      xhr.upload.ontimeout = function () {\n        // Fired when progress is terminated due to preset time expiring\n      };\n\n      xhr.upload.onerror = function (event) {\n        eventTarget.dispatchEvent(\n          new CustomEvent(\"error\", {\n            detail: { status: xhr.status, message: event.target.responseText }\n          })\n        );\n        reject({\n          status: xhr.status,\n          statusText: xhr.statusText\n        });\n      };\n\n      xhr.send(formdata);\n    });\n  }\n}\n\nexport default UpLarge;\n"],"names":["$05af1e91c7a6ffa3$var$cloudName","$05af1e91c7a6ffa3$var$publicId","$05af1e91c7a6ffa3$var$uploadPreset","$05af1e91c7a6ffa3$var$chunkSize","$05af1e91c7a6ffa3$var$xUniqueUploadId","$05af1e91c7a6ffa3$var$chunkCount","$05af1e91c7a6ffa3$var$file","$05af1e91c7a6ffa3$var$fileSize","$05af1e91c7a6ffa3$var$fromByte","$05af1e91c7a6ffa3$var$toByte","$05af1e91c7a6ffa3$var$retries","$05af1e91c7a6ffa3$var$retriesCount","$05af1e91c7a6ffa3$var$eventTarget","$05af1e91c7a6ffa3$var$uploadFile","fileToUpload","TypeError","size","$05af1e91c7a6ffa3$var$processFile","retry","fromByte","toByte","formdata","xhr","parseInt","part","slice","send","FormData","append","XMLHttpRequest","Promise","resolve","reject","onload","readyState","status","statusText","open","timeout","setRequestHeader","upload","onloadstart","onloadend","onabort","onprogress","event","total","Math","max","uploaded","loaded","dispatchEvent","CustomEvent","detail","percent","ontimeout","onerror","message","target","responseText","then","res","response","JSON","parse","catch","error","console","$8bfe43a2def9b0db$var$upload","file","props","upLarge","cloudName","uploadPreset","Date","publicId","emitter","EventTarget","uploadFile","addEventListener","evt","document","getElementById","value","round","innerHTML","url","playback_url","resource_type","secure_url","href","$8bfe43a2def9b0db$var$picker","e","files","$8bfe43a2def9b0db$var$container","querySelector","preventDefault","stopPropagation","classList","add","remove","draggedData","dataTransfer"],"version":3,"file":"index.6526f2a9.js.map"}