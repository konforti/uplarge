{"mappings":"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","sources":["<anon>","example/index.js","src/Uplarge.js"],"sourcesContent":["let $91001294eca2ec6f$var$cloudName, $91001294eca2ec6f$var$publicId, $91001294eca2ec6f$var$uploadPreset, $91001294eca2ec6f$var$chunkSize, $91001294eca2ec6f$var$xUniqueUploadId, $91001294eca2ec6f$var$chunkCount, $91001294eca2ec6f$var$totalChunks, $91001294eca2ec6f$var$startTime, $91001294eca2ec6f$var$file, $91001294eca2ec6f$var$fileSize, $91001294eca2ec6f$var$fromByte, $91001294eca2ec6f$var$toByte, $91001294eca2ec6f$var$offline, $91001294eca2ec6f$var$retries, $91001294eca2ec6f$var$retriesCount, $91001294eca2ec6f$var$eventTarget;\nwindow.addEventListener(\"online\", ()=>{\n    $91001294eca2ec6f$var$offline = false;\n    console.debug(\"Online\");\n});\nwindow.addEventListener(\"offline\", ()=>{\n    $91001294eca2ec6f$var$offline = true;\n    console.debug(\"Offline\");\n});\nfunction $91001294eca2ec6f$var$Uplarge(props) {\n    $91001294eca2ec6f$var$xUniqueUploadId = +new Date();\n    $91001294eca2ec6f$var$publicId = props && props.publicId || $91001294eca2ec6f$var$xUniqueUploadId;\n    $91001294eca2ec6f$var$cloudName = props && props.cloudName || \"demo\";\n    $91001294eca2ec6f$var$uploadPreset = props && props.uploadPreset || \"unsigned\";\n    $91001294eca2ec6f$var$chunkSize = 6000000; // Bytes (must be larger than 5,000,000)\n    $91001294eca2ec6f$var$fromByte = 0;\n    $91001294eca2ec6f$var$toByte = 0;\n    $91001294eca2ec6f$var$offline = false;\n    $91001294eca2ec6f$var$chunkCount = 0;\n    $91001294eca2ec6f$var$retries = 5;\n    $91001294eca2ec6f$var$retriesCount = 0;\n    $91001294eca2ec6f$var$eventTarget = new EventTarget();\n    return {\n        on: $91001294eca2ec6f$var$eventTarget,\n        uploadFile: $91001294eca2ec6f$var$uploadFile\n    };\n}\nfunction $91001294eca2ec6f$var$uploadFile(fileToUpload) {\n    if (!fileToUpload) return new TypeError(\"The file is missing\");\n    $91001294eca2ec6f$var$file = fileToUpload;\n    $91001294eca2ec6f$var$fileSize = $91001294eca2ec6f$var$file.size;\n    $91001294eca2ec6f$var$totalChunks = Math.ceil($91001294eca2ec6f$var$fileSize / $91001294eca2ec6f$var$chunkSize);\n    $91001294eca2ec6f$var$startTime = Date.now();\n    $91001294eca2ec6f$var$processFile();\n}\nfunction $91001294eca2ec6f$var$processFile(retry = false) {\n    if ($91001294eca2ec6f$var$offline) {\n        console.debug(\"Still offline ...\");\n        return setTimeout($91001294eca2ec6f$var$processFile, 1000, retry); // Wait for online and retry.\n    }\n    $91001294eca2ec6f$var$toByte = $91001294eca2ec6f$var$fromByte + $91001294eca2ec6f$var$chunkSize;\n    if ($91001294eca2ec6f$var$toByte > $91001294eca2ec6f$var$fileSize) $91001294eca2ec6f$var$toByte = $91001294eca2ec6f$var$fileSize;\n    let part = $91001294eca2ec6f$var$file.slice($91001294eca2ec6f$var$fromByte, $91001294eca2ec6f$var$toByte);\n    if (!retry) $91001294eca2ec6f$var$chunkCount++;\n    send(part).then((res)=>{\n        if (res.status / 100 === 2) {\n            $91001294eca2ec6f$var$retriesCount = 0;\n            if ($91001294eca2ec6f$var$toByte < $91001294eca2ec6f$var$fileSize) {\n                $91001294eca2ec6f$var$fromByte = $91001294eca2ec6f$var$toByte;\n                console.debug(`Uploaded chunk number ${$91001294eca2ec6f$var$chunkCount}`);\n                $91001294eca2ec6f$var$processFile();\n            } else $91001294eca2ec6f$var$eventTarget.dispatchEvent(new CustomEvent(\"success\", {\n                detail: {\n                    response: JSON.parse(res.response)\n                }\n            }));\n        } else if ($91001294eca2ec6f$var$retriesCount < $91001294eca2ec6f$var$retries) {\n            $91001294eca2ec6f$var$retriesCount++;\n            console.debug(`${$91001294eca2ec6f$var$retriesCount}/${$91001294eca2ec6f$var$retries} retries to upload chunk number ${$91001294eca2ec6f$var$chunkCount}`);\n            return setTimeout($91001294eca2ec6f$var$processFile, 1000, true); // Retry with count.\n        } else $91001294eca2ec6f$var$eventTarget.dispatchEvent(new CustomEvent(\"error\", {\n            detail: res\n        }));\n    }).catch((error)=>{\n        console.error(error);\n    });\n    function send(part) {\n        let formdata = new FormData();\n        formdata.append(\"file\", part);\n        formdata.append(\"upload_preset\", $91001294eca2ec6f$var$uploadPreset);\n        formdata.append(\"cloud_name\", $91001294eca2ec6f$var$cloudName);\n        formdata.append(\"public_id\", $91001294eca2ec6f$var$publicId);\n        let xhr = new XMLHttpRequest();\n        return new Promise((resolve, reject)=>{\n            xhr.open(\"POST\", `https://api.cloudinary.com/v1_1/${$91001294eca2ec6f$var$cloudName}/auto/upload`);\n            xhr.setRequestHeader(\"X-Unique-Upload-Id\", $91001294eca2ec6f$var$xUniqueUploadId);\n            xhr.setRequestHeader(\"Content-Range\", `bytes ${$91001294eca2ec6f$var$fromByte}-${$91001294eca2ec6f$var$toByte - 1}/${$91001294eca2ec6f$var$fileSize}`);\n            xhr.onload = ()=>{\n                // Fired when an XMLHttpRequest transaction completes successfully\n                if (xhr.readyState !== 4) return; // Only run if the request is complete (4 == Done)\n                resolve(xhr);\n            };\n            xhr.upload.onloadstart = ()=>{\n            // Fired when a request has started to load data\n            };\n            xhr.upload.onloadend = ()=>{\n            // Fired when a request has been completed, whether successfully (after load) or unsuccessfully (after abort or error)\n            };\n            xhr.upload.onabort = ()=>{\n                // Fired when a request has been aborted, for example, because the program called XMLHttpRequest.abort().\n                resolve(xhr);\n            };\n            xhr.upload.onprogress = (event)=>{\n                // Fired periodically when a request receives more data\n                let total = Math.max(event.total, $91001294eca2ec6f$var$fileSize); // Bytes\n                let uploaded = ($91001294eca2ec6f$var$chunkCount - 1) * $91001294eca2ec6f$var$chunkSize + event.loaded; // Bytes\n                let percent = uploaded / total * 100;\n                let elapsed = (Date.now() - $91001294eca2ec6f$var$startTime) / 1000; // Seconds\n                let speed = Math.max(uploaded / elapsed, 1); // Bytes/Second\n                $91001294eca2ec6f$var$eventTarget.dispatchEvent(new CustomEvent(\"progress\", {\n                    detail: {\n                        percent: percent,\n                        speed: speed,\n                        uploaded: uploaded,\n                        total: total\n                    }\n                }));\n            };\n            xhr.upload.ontimeout = ()=>{\n                // Fired when progress is terminated due to preset time expiring.\n                resolve(xhr);\n            };\n            xhr.upload.onerror = ()=>{\n                // Fired when the request encountered an error.\n                resolve(xhr);\n            };\n            xhr.send(formdata);\n        });\n    }\n}\nvar $91001294eca2ec6f$export$2e2bcd8739ae039 = $91001294eca2ec6f$var$Uplarge;\n\n\nlet $393e677ed3c566ae$var$pickerEl = document.getElementById(\"picker\");\nlet $393e677ed3c566ae$var$clearEl = document.getElementById(\"clear\");\nlet $393e677ed3c566ae$var$statusEl = document.getElementById(\"status\");\nlet $393e677ed3c566ae$var$progressEl = document.getElementById(\"progress\");\nlet $393e677ed3c566ae$var$urlEl = document.getElementById(\"url\");\nlet $393e677ed3c566ae$var$errEl = document.getElementById(\"err\");\nlet $393e677ed3c566ae$var$infoEl = document.getElementById(\"info\");\nlet $393e677ed3c566ae$var$containerEl = document.querySelector(\".container\");\nlet $393e677ed3c566ae$var$progressToolsEl = document.querySelector(\".progress-tools\");\nlet $393e677ed3c566ae$var$uploadToolsEl = document.querySelector(\".upload-tools\");\nlet $393e677ed3c566ae$var$finishToolsEl = document.querySelector(\".finish-tools\");\nfunction $393e677ed3c566ae$var$upload(file) {\n    let startTime = Date.now();\n    let urlParams = new URLSearchParams(window.location.search);\n    let cloudName = urlParams.get(\"cloud_name\") || \"demo\";\n    let uploadPreset = urlParams.get(\"upload_preset\") || \"unsigned\";\n    let props = {\n        cloudName: cloudName,\n        uploadPreset: uploadPreset\n    };\n    let uplarge = (0, $91001294eca2ec6f$export$2e2bcd8739ae039)(props);\n    uplarge.uploadFile(file);\n    uplarge.on.addEventListener(\"progress\", (e)=>{\n        $393e677ed3c566ae$var$progressEl.value = Math.round(e.detail.percent);\n        $393e677ed3c566ae$var$statusEl.innerHTML = `${Math.round(e.detail.percent)}%`;\n        let speed = $393e677ed3c566ae$var$bytesFormat(e.detail.speed);\n        let bytesLeft = Math.max(e.detail.total - e.detail.uploaded, 0);\n        let secondsLeft = Math.max(bytesLeft / e.detail.speed, 0);\n        let uploaded = $393e677ed3c566ae$var$bytesFormat(e.detail.uploaded);\n        let total = $393e677ed3c566ae$var$bytesFormat(e.detail.total);\n        $393e677ed3c566ae$var$infoEl.innerHTML = `${speed[0]} ${speed[1]}/s · ${uploaded[0]} ${uploaded[1]}/${total[0]} ${total[1]} · ${$393e677ed3c566ae$var$formatTime(secondsLeft)} left`;\n    });\n    uplarge.on.addEventListener(\"success\", (e)=>{\n        let res = e.detail.response;\n        let url = res.playback_url;\n        if (res.resource_type !== \"video\") url = res.secure_url;\n        $393e677ed3c566ae$var$urlEl.innerHTML = url;\n        $393e677ed3c566ae$var$urlEl.href = url;\n        $393e677ed3c566ae$var$showFinish();\n    });\n    uplarge.on.addEventListener(\"error\", (e)=>{\n        $393e677ed3c566ae$var$errEl.innerHTML = `Error during the upload: [${e.detail.status}] ${e.detail.message}.`;\n        $393e677ed3c566ae$var$showFinish();\n    });\n}\n$393e677ed3c566ae$var$clearEl.addEventListener(\"click\", (e)=>{\n    if (!$393e677ed3c566ae$var$pickerEl.value) return;\n    $393e677ed3c566ae$var$pickerEl.disabled = null;\n    $393e677ed3c566ae$var$progressEl.value = 0;\n    $393e677ed3c566ae$var$statusEl.innerHTML = \"0%\";\n    $393e677ed3c566ae$var$urlEl.innerHTML = null;\n    $393e677ed3c566ae$var$urlEl.href = null;\n    $393e677ed3c566ae$var$showPicker();\n});\n$393e677ed3c566ae$var$pickerEl.addEventListener(\"input\", (e)=>{\n    let file = $393e677ed3c566ae$var$pickerEl.files[0];\n    $393e677ed3c566ae$var$upload(file);\n    $393e677ed3c566ae$var$pickerEl.disabled = \"disabled\";\n    let size = $393e677ed3c566ae$var$bytesFormat(file.size);\n    console.debug(`Name: ${file.name} Size: ${size[0]} ${size[1]} Type: ${file.type}`);\n    $393e677ed3c566ae$var$showProgress();\n});\n$393e677ed3c566ae$var$containerEl.addEventListener(\"dragenter\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.add(\"active\");\n}, false);\n$393e677ed3c566ae$var$containerEl.addEventListener(\"dragleave\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.remove(\"active\");\n}, false);\n$393e677ed3c566ae$var$containerEl.addEventListener(\"dragover\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.add(\"active\");\n}, false);\n$393e677ed3c566ae$var$containerEl.addEventListener(\"drop\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.remove(\"active\");\n    let draggedData = e.dataTransfer;\n    $393e677ed3c566ae$var$upload(draggedData.files[0]);\n    $393e677ed3c566ae$var$showProgress();\n}, false);\nfunction $393e677ed3c566ae$var$showPicker() {\n    $393e677ed3c566ae$var$progressToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$progressToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.add(\"show\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.remove(\"hide\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.remove(\"show\");\n}\nfunction $393e677ed3c566ae$var$showProgress() {\n    $393e677ed3c566ae$var$progressToolsEl.classList.add(\"show\");\n    $393e677ed3c566ae$var$progressToolsEl.classList.remove(\"hide\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.remove(\"show\");\n}\nfunction $393e677ed3c566ae$var$showFinish() {\n    $393e677ed3c566ae$var$progressToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$progressToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.add(\"show\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.remove(\"hide\");\n}\nconst $393e677ed3c566ae$var$units = [\n    \"bytes\",\n    \"KB\",\n    \"MB\",\n    \"GB\",\n    \"TB\",\n    \"PB\",\n    \"EB\",\n    \"ZB\",\n    \"YB\"\n];\nfunction $393e677ed3c566ae$var$bytesFormat(x) {\n    let l = 0, n = parseInt(x, 10) || 0;\n    while(n >= 1000 && ++l)n = n / 1000;\n    return [\n        n.toFixed(n < 10 && l > 0 ? 1 : 0),\n        $393e677ed3c566ae$var$units[l]\n    ];\n}\nfunction $393e677ed3c566ae$var$formatTime(seconds) {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor(seconds % 3600 / 60);\n    const s = Math.round(seconds % 60);\n    return [\n        h,\n        m > 9 ? m : h ? \"0\" + m : m || \"0\",\n        s > 9 ? s : \"0\" + s\n    ].filter(Boolean).join(\":\");\n}\n\n\n//# sourceMappingURL=index.b72c350a.js.map\n","import Uplarge from \"../src/Uplarge\";\n\nlet pickerEl = document.getElementById(\"picker\");\nlet clearEl = document.getElementById(\"clear\");\nlet statusEl = document.getElementById(\"status\");\nlet progressEl = document.getElementById(\"progress\");\nlet urlEl = document.getElementById(\"url\");\nlet errEl = document.getElementById(\"err\");\nlet infoEl = document.getElementById(\"info\");\nlet containerEl = document.querySelector(\".container\");\nlet progressToolsEl = document.querySelector(\".progress-tools\");\nlet uploadToolsEl = document.querySelector(\".upload-tools\");\nlet finishToolsEl = document.querySelector(\".finish-tools\");\n\nfunction upload(file) {\n    let startTime = Date.now()\n    let urlParams = new URLSearchParams(window.location.search);\n    let cloudName = urlParams.get(\"cloud_name\") || \"demo\";\n    let uploadPreset = urlParams.get(\"upload_preset\") || \"unsigned\";\n\n    let props = {\n        cloudName,\n        uploadPreset,\n    };\n    let uplarge = Uplarge(props);\n    uplarge.uploadFile(file);\n\n    uplarge.on.addEventListener(\"progress\", (e) => {\n        progressEl.value = Math.round(e.detail.percent);\n        statusEl.innerHTML = `${Math.round(e.detail.percent)}%`;\n        let speed = bytesFormat(e.detail.speed);\n        let bytesLeft = Math.max(e.detail.total - e.detail.uploaded, 0);\n        let secondsLeft = Math.max(bytesLeft / e.detail.speed, 0);\n        let uploaded = bytesFormat(e.detail.uploaded);\n        let total = bytesFormat(e.detail.total);\n        infoEl.innerHTML = `${speed[0]} ${speed[1]}/s · ${uploaded[0]} ${\n            uploaded[1]\n        }/${total[0]} ${total[1]} · ${formatTime(secondsLeft)} left`;\n    });\n    uplarge.on.addEventListener(\"success\", (e) => {\n        let res = e.detail.response;\n        let url = res.playback_url;\n        if (res.resource_type !== \"video\") {\n            url = res.secure_url;\n        }\n        urlEl.innerHTML = url;\n        urlEl.href = url;\n        showFinish();\n    });\n    uplarge.on.addEventListener(\"error\", (e) => {\n        errEl.innerHTML = `Error during the upload: [${e.detail.status}] ${e.detail.message}.`;\n        showFinish();\n    });\n}\n\nclearEl.addEventListener(\"click\", (e) => {\n    if (!pickerEl.value) return;\n    pickerEl.disabled = null;\n    progressEl.value = 0;\n    statusEl.innerHTML = \"0%\";\n    urlEl.innerHTML = null;\n    urlEl.href = null;\n    showPicker();\n});\n\npickerEl.addEventListener(\"input\", (e) => {\n    let file = pickerEl.files[0];\n    upload(file);\n    pickerEl.disabled = \"disabled\";\n    let size = bytesFormat(file.size);\n    console.debug(\n        `Name: ${file.name} Size: ${size[0]} ${size[1]} Type: ${file.type}`\n    );\n    showProgress();\n});\n\ncontainerEl.addEventListener(\n    \"dragenter\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.add(\"active\");\n    },\n    false\n);\n\ncontainerEl.addEventListener(\n    \"dragleave\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.remove(\"active\");\n    },\n    false\n);\n\ncontainerEl.addEventListener(\n    \"dragover\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.add(\"active\");\n    },\n    false\n);\n\ncontainerEl.addEventListener(\n    \"drop\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.remove(\"active\");\n        let draggedData = e.dataTransfer;\n        upload(draggedData.files[0]);\n        showProgress();\n    },\n    false\n);\n\nfunction showPicker() {\n    progressToolsEl.classList.add(\"hide\");\n    progressToolsEl.classList.remove(\"show\");\n    uploadToolsEl.classList.add(\"show\");\n    uploadToolsEl.classList.remove(\"hide\");\n    finishToolsEl.classList.add(\"hide\");\n    finishToolsEl.classList.remove(\"show\");\n}\n\nfunction showProgress() {\n    progressToolsEl.classList.add(\"show\");\n    progressToolsEl.classList.remove(\"hide\");\n    uploadToolsEl.classList.add(\"hide\");\n    uploadToolsEl.classList.remove(\"show\");\n    finishToolsEl.classList.add(\"hide\");\n    finishToolsEl.classList.remove(\"show\");\n}\n\nfunction showFinish() {\n    progressToolsEl.classList.add(\"hide\");\n    progressToolsEl.classList.remove(\"show\");\n    uploadToolsEl.classList.add(\"hide\");\n    uploadToolsEl.classList.remove(\"show\");\n    finishToolsEl.classList.add(\"show\");\n    finishToolsEl.classList.remove(\"hide\");\n}\n\nconst units = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\nfunction bytesFormat(x) {\n    let l = 0,\n        n = parseInt(x, 10) || 0;\n    while (n >= 1000 && ++l) {\n        n = n / 1000;\n    }\n    return [n.toFixed(n < 10 && l > 0 ? 1 : 0), units[l]];\n}\n\nfunction formatTime(seconds) {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.round(seconds % 60);\n    return [h, m > 9 ? m : h ? \"0\" + m : m || \"0\", s > 9 ? s : \"0\" + s]\n        .filter(Boolean)\n        .join(\":\");\n}\n","let cloudName,\n    publicId,\n    uploadPreset,\n    chunkSize,\n    xUniqueUploadId,\n    chunkCount,\n    totalChunks,\n    startTime,\n    file,\n    fileSize,\n    fromByte,\n    toByte,\n    offline,\n    retries,\n    retriesCount,\n    eventTarget;\n\nwindow.addEventListener(\"online\", () => {\n    offline = false;\n    console.debug(\"Online\");\n});\n\nwindow.addEventListener(\"offline\", () => {\n    offline = true;\n    console.debug(\"Offline\");\n});\n\nfunction Uplarge(props) {\n    xUniqueUploadId = +new Date();\n    publicId = (props && props.publicId) || xUniqueUploadId;\n    cloudName = (props && props.cloudName) || \"demo\";\n    uploadPreset = (props && props.uploadPreset) || \"unsigned\";\n    chunkSize = 6000000; // Bytes (must be larger than 5,000,000)\n    fromByte = 0;\n    toByte = 0;\n    offline = false;\n    chunkCount = 0;\n    retries = 5;\n    retriesCount = 0;\n    eventTarget = new EventTarget();\n    return {\n        on: eventTarget,\n        uploadFile,\n    };\n}\n\nfunction uploadFile(fileToUpload) {\n    if (!fileToUpload) {\n        return new TypeError(\"The file is missing\");\n    }\n    file = fileToUpload;\n    fileSize = file.size;\n    totalChunks = Math.ceil(fileSize / chunkSize);\n    startTime = Date.now();\n    processFile();\n}\n\nfunction processFile(retry = false) {\n    if (offline) {\n        console.debug(\"Still offline ...\");\n        return setTimeout(processFile, 1000, retry); // Wait for online and retry.\n    }\n    toByte = fromByte + chunkSize;\n    if (toByte > fileSize) {\n        toByte = fileSize;\n    }\n    let part = file.slice(fromByte, toByte);\n    if (!retry) {\n        chunkCount++;\n    }\n    send(part)\n        .then((res) => {\n            if (res.status / 100 === 2) {\n                retriesCount = 0;\n                if (toByte < fileSize) {\n                    fromByte = toByte;\n                    console.debug(`Uploaded chunk number ${chunkCount}`);\n                    processFile();\n                } else {\n                    eventTarget.dispatchEvent(\n                        new CustomEvent(\"success\", {\n                            detail: { response: JSON.parse(res.response) },\n                        })\n                    );\n                }\n            } else if (retriesCount < retries) {\n                retriesCount++;\n                console.debug(\n                    `${retriesCount}/${retries} retries to upload chunk number ${chunkCount}`\n                );\n                return setTimeout(processFile, 1000, true); // Retry with count.\n            } else {\n                eventTarget.dispatchEvent(\n                    new CustomEvent(\"error\", {\n                        detail: res,\n                    })\n                );\n            }\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n\n    function send(part) {\n        let formdata = new FormData();\n        formdata.append(\"file\", part);\n        formdata.append(\"upload_preset\", uploadPreset);\n        formdata.append(\"cloud_name\", cloudName);\n        formdata.append(\"public_id\", publicId);\n\n        let xhr = new XMLHttpRequest();\n        return new Promise((resolve, reject) => {\n            xhr.open(\n                \"POST\",\n                `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`\n            );\n            xhr.setRequestHeader(\"X-Unique-Upload-Id\", xUniqueUploadId);\n            xhr.setRequestHeader(\n                \"Content-Range\",\n                `bytes ${fromByte}-${toByte - 1}/${fileSize}`\n            );\n\n            xhr.onload = () => {\n                // Fired when an XMLHttpRequest transaction completes successfully\n                if (xhr.readyState !== 4) {\n                    return; // Only run if the request is complete (4 == Done)\n                }\n                resolve(xhr);\n            };\n\n            xhr.upload.onloadstart = () => {\n                // Fired when a request has started to load data\n            };\n\n            xhr.upload.onloadend = () => {\n                // Fired when a request has been completed, whether successfully (after load) or unsuccessfully (after abort or error)\n            };\n\n            xhr.upload.onabort = () => {\n                // Fired when a request has been aborted, for example, because the program called XMLHttpRequest.abort().\n                resolve(xhr);\n            };\n\n            xhr.upload.onprogress = (event) => {\n                // Fired periodically when a request receives more data\n                let total = Math.max(event.total, fileSize); // Bytes\n                let uploaded = (chunkCount - 1) * chunkSize + event.loaded; // Bytes\n                let percent = (uploaded / total) * 100;\n                let elapsed = (Date.now() - startTime) / 1000; // Seconds\n                let speed = Math.max(uploaded / elapsed, 1); // Bytes/Second\n                eventTarget.dispatchEvent(\n                    new CustomEvent(\"progress\", {\n                        detail: { percent, speed, uploaded, total },\n                    })\n                );\n            };\n\n            xhr.upload.ontimeout = () => {\n                // Fired when progress is terminated due to preset time expiring.\n                resolve(xhr);\n            };\n\n            xhr.upload.onerror = () => {\n                // Fired when the request encountered an error.\n                resolve(xhr);\n            };\n\n            xhr.send(formdata);\n        });\n    }\n}\n\nexport default Uplarge;\n"],"names":["$91001294eca2ec6f$var$cloudName","$91001294eca2ec6f$var$publicId","$91001294eca2ec6f$var$uploadPreset","$91001294eca2ec6f$var$chunkSize","$91001294eca2ec6f$var$xUniqueUploadId","$91001294eca2ec6f$var$chunkCount","$91001294eca2ec6f$var$startTime","$91001294eca2ec6f$var$file","$91001294eca2ec6f$var$fileSize","$91001294eca2ec6f$var$fromByte","$91001294eca2ec6f$var$toByte","$91001294eca2ec6f$var$offline","$91001294eca2ec6f$var$retries","$91001294eca2ec6f$var$retriesCount","$91001294eca2ec6f$var$eventTarget","$91001294eca2ec6f$var$uploadFile","fileToUpload","TypeError","size","Date","now","$91001294eca2ec6f$var$processFile","retry","formdata","xhr","console","debug","setTimeout","part","slice","send","FormData","append","XMLHttpRequest","Promise","resolve","reject","open","setRequestHeader","onload","readyState","upload","onloadstart","onloadend","onabort","onprogress","event","total","Math","max","uploaded","loaded","elapsed","dispatchEvent","CustomEvent","detail","percent","speed","ontimeout","onerror","then","res","status","response","JSON","parse","catch","error","window","addEventListener","$393e677ed3c566ae$var$pickerEl","document","getElementById","$393e677ed3c566ae$var$clearEl","$393e677ed3c566ae$var$statusEl","$393e677ed3c566ae$var$progressEl","$393e677ed3c566ae$var$urlEl","$393e677ed3c566ae$var$errEl","$393e677ed3c566ae$var$infoEl","$393e677ed3c566ae$var$containerEl","querySelector","$393e677ed3c566ae$var$progressToolsEl","$393e677ed3c566ae$var$uploadToolsEl","$393e677ed3c566ae$var$finishToolsEl","$393e677ed3c566ae$var$upload","file","props","urlParams","URLSearchParams","location","search","uplarge","cloudName","get","uploadPreset","publicId","on","EventTarget","uploadFile","e","value","round","innerHTML","$393e677ed3c566ae$var$bytesFormat","secondsLeft","bytesLeft","$393e677ed3c566ae$var$formatTime","seconds","h","floor","m","s","filter","Boolean","join","url","playback_url","resource_type","secure_url","href","$393e677ed3c566ae$var$showFinish","message","$393e677ed3c566ae$var$showProgress","classList","add","remove","disabled","files","name","type","preventDefault","stopPropagation","draggedData","dataTransfer","$393e677ed3c566ae$var$units","x","l","n","parseInt","toFixed"],"version":3,"file":"index.b72c350a.js.map"}