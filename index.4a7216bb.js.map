{"mappings":"IEAI,EACA,EACA,EACA,EACA,EACA,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAoBJ,SAAS,EAAW,CAAY,EAC5B,GAAI,CAAC,EACD,OAAO,AAAI,UAAU,uBAGzB,EAAW,AADX,CAAA,EAAO,CAAP,EACgB,IAAhB,CAEA,AAGJ,SAAS,EAAY,EAAQ,CAAA,CAAK,MAiCV,EAAU,MACtB,EAMA,EAvCR,CAAA,EAAS,EAAW,SAAS,EAA7B,EACa,GACT,CAAA,EAAS,CADb,EAGA,IAAI,EAAO,EAAK,KAAA,CAAM,EAAU,EAC5B,EAAC,GACD,IAEJ,CAwBoB,EAxBT,EAwBmB,EAxBT,EAAS,EA0B1B,CADI,EAAW,IAAI,UACV,MAAA,CAAO,OA1Bf,GA2BD,EAAS,MAAA,CAAO,gBAAiB,GACjC,EAAS,MAAA,CAAO,aAAc,GAC9B,EAAS,MAAA,CAAO,YAAa,GAEzB,EAAM,IAAI,eAEP,IAAI,QAAQ,SAAU,CAAO,CAAE,CAAM,EACxC,EAAI,MAAA,CAAS,KAEc,IAAnB,EAAI,UAAA,GAGJ,AAA+B,IAA/B,SAAS,EAAI,MAAA,CAAS,KACtB,EAAQ,GAER,EAAO,CACH,OAAQ,EAAI,MAAZ,CACA,WAAY,EAAI,UAAhB,AACJ,GARQ,mDAAkD;AAUlE,EAEA,EAAI,IAAA,CACA,OACA,CAAC,gCAAgC,EAAE,EAAU,YAAY,CAAC,EAE9D,EAAI,OAAA,CAAU,KACd,EAAI,gBAAA,CAAiB,qBAAsB,GAC3C,EAAI,gBAAA,CACA,gBACA,CAAC,MAAM,EAAE,EAAS,CAAC,EAAE,EAAO,CAAC,EAzDR,EAyDmB,CAAC,EAE7C,EAAI,MAAA,CAAO,WAAA,CAAc,WACrB,gDAAgD;AACpD,EAEA,EAAI,SAAA,CAAY,WACZ,sHAAsH;AAC1H,EAEA,EAAI,MAAA,CAAO,OAAA,CAAU,WACjB,yGAAyG;AAC7G,EAEA,EAAI,MAAA,CAAO,UAAA,CAAa,SAAU,CAAK,EACnC,uDAAuD;AACvD,IAAI,EAAQ,KAAK,GAAA,CAAI,EAAM,KAAA,CAzEN,GA6ErB,EAAU,KAAK,GAAA,CADf,EAAU,KAAK,GAAA,CADf,EAAW,AADI,CAAA,AAAC,CAAA,EAAa,CAAA,EAAK,EAAY,EAAM,MAApD,AAAA,EACsB,EAAS,IACH,GACA,IAC5B,EAAY,aAAA,CACR,IAAI,YAAY,WAAY,CACxB,OAAQ,CAAE,QAAA,CAAQ,CACtB,GAER,EAEA,EAAI,MAAA,CAAO,SAAA,CAAY,WACnB,gEAAgE;AACpE,EAEA,EAAI,MAAA,CAAO,OAAA,CAAU,SAAU,CAAK,EAChC,EAAY,aAAA,CACR,IAAI,YAAY,QAAS,CACrB,OAAQ,CACJ,OAAQ,EAAI,MAAZ,CACA,QAAS,EAAM,MAAA,CAAO,YAAtB,AACJ,CACJ,IAEJ,EAAO,CACH,OAAQ,EAAI,MAAZ,CACA,WAAY,EAAI,UAAhB,AACJ,EACJ,EAEA,EAAI,IAAA,CAAK,EACb,IAxGC,IAAA,CAAK,AAAC,IACC,AAA+B,IAA/B,SAAS,EAAI,MAAA,CAAS,MACtB,EAAe,EACX,EAAS,GACT,EAAW,EACX,MAEA,EAAU,IACV,EAAY,aAAA,CACR,IAAI,YAAY,UAAW,CACvB,OAAQ,CAAE,SAAU,KAAK,KAAA,CAAM,EAAI,QAAzB,CAAmC,CACjD,MAGD,KAAkB,IACzB,QAAQ,IAAA,CAAK,CAAC,EAAE,EAAa,gBAAgB,EAAE,EAAW,CAAC,EAC3D,EAAY,CAAA,GAEpB,GACC,KAAA,CAAM,AAAC,IACJ,QAAQ,KAAA,CAAM,EAClB,EAqFR,GAtHA,CDxCA,IAAI,EAAW,SAAS,cAAA,CAAe,UACnC,EAAU,SAAS,cAAA,CAAe,SAClC,EAAW,SAAS,cAAA,CAAe,UACnC,EAAa,SAAS,cAAA,CAAe,YACrC,EAAQ,SAAS,cAAA,CAAe,OAChC,EAAc,SAAS,aAAA,CAAc,cACrC,EAAkB,SAAS,aAAA,CAAc,mBACzC,EAAgB,SAAS,aAAA,CAAc,iBACvC,EAAgB,SAAS,aAAA,CAAc,iBAE3C,SAAS,EAAO,CAAI,MCIH,EDHb,IAAI,EAAY,IAAI,gBAAgB,OAAO,QAAA,CAAS,MAApD,EAQI,GCLS,EDCD,CACR,UAJY,EAAU,GAAA,CAAI,eAAiB,OAK3C,aAJe,EAAU,GAAA,CAAI,kBAAoB,UAKrD,ECHA,EAAkB,CAAC,IAAI,KACvB,EAAW,GAAU,EAAM,QAAA,EAAa,EACxC,EAAY,GAAU,EAAM,SAAA,EAAc,OAC1C,EAAe,GAAU,EAAM,YAAA,EAAiB,WAChD,EAAY,IACZ,EAAW,EACX,EAAS,EACT,EAAa,EACb,EAAU,EACV,EAAe,EAER,CACH,GAFJ,EAAc,IAAI,YAGd,WAAY,CAChB,GDTA,EAAQ,UAAA,CAAW,GAEnB,EAAQ,EAAA,CAAG,gBAAA,CAAiB,WAAY,AAAC,IACrC,EAAW,KAAA,CAAQ,KAAK,KAAA,CAAM,EAAI,MAAA,CAAO,OAAzC,EACA,EAAS,SAAA,CAAY,CAAC,EAAE,KAAK,KAAA,CAAM,EAAI,MAAA,CAAO,OAAA,EAAS,CAAC,CAAC,AAC7D,GACA,EAAQ,EAAA,CAAG,gBAAA,CAAiB,UAAW,AAAC,IACpC,IAAI,EAAM,EAAI,MAAA,CAAO,QAArB,CACI,EAAM,EAAI,YAAd,AAC0B,CAAA,UAAtB,EAAI,aAAA,EACJ,CAAA,EAAM,EAAI,UADd,AAAA,EAGA,EAAM,SAAA,CAAY,EAClB,EAAM,IAAA,CAAO,EA0FjB,EAAgB,SAAA,CAAU,GAAA,CAAI,QAC9B,EAAgB,SAAA,CAAU,MAAA,CAAO,QACjC,EAAc,SAAA,CAAU,GAAA,CAAI,QAC5B,EAAc,SAAA,CAAU,MAAA,CAAO,QAC/B,EAAc,SAAA,CAAU,GAAA,CAAI,QAC5B,EAAc,SAAA,CAAU,MAAA,CAAO,OA7F/B,GACA,EAAQ,EAAA,CAAG,gBAAA,CAAiB,QAAS,AAAC,IAClC,MAAM,SAAA,CAAY,CAAC,0BAA0B,EAAE,EAAI,MAAA,CAAO,MAAA,CAAO,EAAE,EAAE,EAAI,MAAA,CAAO,OAAA,CAAQ,CAAC,CAAC,AAC9F,EACJ,CA0EA,SAAS,IACL,EAAgB,SAAA,CAAU,GAAA,CAAI,QAC9B,EAAgB,SAAA,CAAU,MAAA,CAAO,QACjC,EAAc,SAAA,CAAU,GAAA,CAAI,QAC5B,EAAc,SAAA,CAAU,MAAA,CAAO,QAC/B,EAAc,SAAA,CAAU,GAAA,CAAI,QAC5B,EAAc,SAAA,CAAU,MAAA,CAAO,OACnC,CA/EA,EAAQ,gBAAA,CAAiB,QAAS,AAAC,IAC1B,EAAS,KAAA,GACd,EAAS,QAAA,CAAW,KACpB,EAAW,KAAA,CAAQ,EACnB,EAAS,SAAA,CAAY,KACrB,EAAM,SAAA,CAAY,KAClB,EAAM,IAAA,CAAO,KA0Db,EAAgB,SAAA,CAAU,GAAA,CAAI,QAC9B,EAAgB,SAAA,CAAU,MAAA,CAAO,QACjC,EAAc,SAAA,CAAU,GAAA,CAAI,QAC5B,EAAc,SAAA,CAAU,MAAA,CAAO,QAC/B,EAAc,SAAA,CAAU,GAAA,CAAI,QAC5B,EAAc,SAAA,CAAU,MAAA,CAAO,QA7DnC,GAEA,EAAS,gBAAA,CAAiB,QAAS,AAAC,IAChC,EAAO,EAAS,KAAK,CAAC,EAAE,EACxB,EAAS,QAAA,CAAW,WACpB,GACJ,GAEA,EAAY,gBAAA,CACR,YACA,AAAC,IACO,EAAS,KAAA,GACb,EAAE,cAAF,GACA,EAAE,eAAF,GACA,EAAY,SAAA,CAAU,GAAA,CAAI,UAC9B,EACA,CAAA,GAGJ,EAAY,gBAAA,CACR,YACA,AAAC,IACO,EAAS,KAAA,GACb,EAAE,cAAF,GACA,EAAE,eAAF,GACA,EAAY,SAAA,CAAU,MAAA,CAAO,UACjC,EACA,CAAA,GAGJ,EAAY,gBAAA,CACR,WACA,AAAC,IACO,EAAS,KAAA,GACb,EAAE,cAAF,GACA,EAAE,eAAF,GACA,EAAY,SAAA,CAAU,GAAA,CAAI,UAC9B,EACA,CAAA,GAGJ,EAAY,gBAAA,CACR,OACA,AAAC,IACO,EAAS,KAAA,GACb,EAAE,cAAF,GACA,EAAE,eAAF,GACA,EAAY,SAAA,CAAU,MAAA,CAAO,UAE7B,EAAO,AADW,EAAE,YAApB,CACmB,KAAK,CAAC,EAAE,EAC3B,IACJ,EACA,CAAA,E,4D","sources":["<anon>","example/index.js","src/Uplarge.js"],"sourcesContent":["let $91001294eca2ec6f$var$cloudName, $91001294eca2ec6f$var$publicId, $91001294eca2ec6f$var$uploadPreset, $91001294eca2ec6f$var$chunkSize, $91001294eca2ec6f$var$xUniqueUploadId, $91001294eca2ec6f$var$chunkCount, $91001294eca2ec6f$var$totalChunks, $91001294eca2ec6f$var$file, $91001294eca2ec6f$var$fileSize, $91001294eca2ec6f$var$fromByte, $91001294eca2ec6f$var$toByte, $91001294eca2ec6f$var$percent, $91001294eca2ec6f$var$retries, $91001294eca2ec6f$var$retriesCount, $91001294eca2ec6f$var$eventTarget;\nfunction $91001294eca2ec6f$var$Uplarge(props) {\n    $91001294eca2ec6f$var$xUniqueUploadId = +new Date();\n    $91001294eca2ec6f$var$publicId = props && props.publicId || $91001294eca2ec6f$var$xUniqueUploadId;\n    $91001294eca2ec6f$var$cloudName = props && props.cloudName || \"demo\";\n    $91001294eca2ec6f$var$uploadPreset = props && props.uploadPreset || \"unsigned\";\n    $91001294eca2ec6f$var$chunkSize = 6000000; // Bytes (must be larger than 5,000,000)\n    $91001294eca2ec6f$var$fromByte = 0;\n    $91001294eca2ec6f$var$toByte = 0;\n    $91001294eca2ec6f$var$chunkCount = 0;\n    $91001294eca2ec6f$var$retries = 3;\n    $91001294eca2ec6f$var$retriesCount = 0;\n    $91001294eca2ec6f$var$eventTarget = new EventTarget();\n    return {\n        on: $91001294eca2ec6f$var$eventTarget,\n        uploadFile: $91001294eca2ec6f$var$uploadFile\n    };\n}\nfunction $91001294eca2ec6f$var$uploadFile(fileToUpload) {\n    if (!fileToUpload) return new TypeError(\"The file is missing\");\n    $91001294eca2ec6f$var$file = fileToUpload;\n    $91001294eca2ec6f$var$fileSize = $91001294eca2ec6f$var$file.size;\n    $91001294eca2ec6f$var$totalChunks = Math.ceil($91001294eca2ec6f$var$fileSize / $91001294eca2ec6f$var$chunkSize);\n    $91001294eca2ec6f$var$processFile();\n}\nfunction $91001294eca2ec6f$var$processFile(retry = false) {\n    $91001294eca2ec6f$var$toByte = $91001294eca2ec6f$var$fromByte + parseInt($91001294eca2ec6f$var$chunkSize);\n    if ($91001294eca2ec6f$var$toByte > $91001294eca2ec6f$var$fileSize) $91001294eca2ec6f$var$toByte = $91001294eca2ec6f$var$fileSize;\n    let part = $91001294eca2ec6f$var$file.slice($91001294eca2ec6f$var$fromByte, $91001294eca2ec6f$var$toByte);\n    if (!retry) $91001294eca2ec6f$var$chunkCount++;\n    send(part, $91001294eca2ec6f$var$fromByte, $91001294eca2ec6f$var$toByte - 1, $91001294eca2ec6f$var$fileSize).then((res)=>{\n        if (parseInt(res.status / 100) === 2) {\n            $91001294eca2ec6f$var$retriesCount = 0;\n            if ($91001294eca2ec6f$var$toByte < $91001294eca2ec6f$var$fileSize) {\n                $91001294eca2ec6f$var$fromByte = $91001294eca2ec6f$var$toByte;\n                $91001294eca2ec6f$var$processFile();\n            } else {\n                $91001294eca2ec6f$var$percent = 100;\n                $91001294eca2ec6f$var$eventTarget.dispatchEvent(new CustomEvent(\"success\", {\n                    detail: {\n                        response: JSON.parse(res.response)\n                    }\n                }));\n            }\n        } else if ($91001294eca2ec6f$var$retriesCount++ <= $91001294eca2ec6f$var$retries) {\n            console.info(`${$91001294eca2ec6f$var$retriesCount} retry of chunk ${$91001294eca2ec6f$var$chunkCount}`);\n            $91001294eca2ec6f$var$processFile(true);\n        }\n    }).catch((error)=>{\n        console.error(error);\n    });\n    function send(part, fromByte, toByte, fileSize) {\n        let formdata = new FormData();\n        formdata.append(\"file\", part);\n        formdata.append(\"upload_preset\", $91001294eca2ec6f$var$uploadPreset);\n        formdata.append(\"cloud_name\", $91001294eca2ec6f$var$cloudName);\n        formdata.append(\"public_id\", $91001294eca2ec6f$var$publicId);\n        let xhr = new XMLHttpRequest();\n        return new Promise(function(resolve, reject) {\n            xhr.onload = ()=>{\n                // Fired when an XMLHttpRequest transaction completes successfully\n                if (xhr.readyState !== 4) return; // Only run if the request is complete (4 == Done)\n                if (parseInt(xhr.status / 100) === 2) resolve(xhr);\n                else reject({\n                    status: xhr.status,\n                    statusText: xhr.statusText\n                });\n            };\n            xhr.open(\"POST\", `https://api.cloudinary.com/v1_1/${$91001294eca2ec6f$var$cloudName}/auto/upload`);\n            xhr.timeout = 3600000;\n            xhr.setRequestHeader(\"X-Unique-Upload-Id\", $91001294eca2ec6f$var$xUniqueUploadId);\n            xhr.setRequestHeader(\"Content-Range\", `bytes ${fromByte}-${toByte}/${fileSize}`);\n            xhr.upload.onloadstart = function() {\n            // Fired when a request has started to load data\n            };\n            xhr.onloadend = function() {\n            // Fired when a request has been completed, whether successfully (after load) or unsuccessfully (after abort or error)\n            };\n            xhr.upload.onabort = function() {\n            // Fired when a request has been aborted, for example, because the program called XMLHttpRequest.abort().\n            };\n            xhr.upload.onprogress = function(event) {\n                // Fired periodically when a request receives more data\n                let total = Math.max(event.total, fileSize);\n                let uploaded = ($91001294eca2ec6f$var$chunkCount - 1) * $91001294eca2ec6f$var$chunkSize + event.loaded;\n                $91001294eca2ec6f$var$percent = uploaded / total * 100;\n                $91001294eca2ec6f$var$percent = Math.max($91001294eca2ec6f$var$percent, 1); // For large we want to show progress right from the start.\n                $91001294eca2ec6f$var$percent = Math.min($91001294eca2ec6f$var$percent, 99); // Same goes for the end 100% before finish can be misleading.\n                $91001294eca2ec6f$var$eventTarget.dispatchEvent(new CustomEvent(\"progress\", {\n                    detail: {\n                        percent: $91001294eca2ec6f$var$percent\n                    }\n                }));\n            };\n            xhr.upload.ontimeout = function() {\n            // Fired when progress is terminated due to preset time expiring\n            };\n            xhr.upload.onerror = function(event) {\n                $91001294eca2ec6f$var$eventTarget.dispatchEvent(new CustomEvent(\"error\", {\n                    detail: {\n                        status: xhr.status,\n                        message: event.target.responseText\n                    }\n                }));\n                reject({\n                    status: xhr.status,\n                    statusText: xhr.statusText\n                });\n            };\n            xhr.send(formdata);\n        });\n    }\n}\nvar $91001294eca2ec6f$export$2e2bcd8739ae039 = $91001294eca2ec6f$var$Uplarge;\n\n\nlet $393e677ed3c566ae$var$pickerEl = document.getElementById(\"picker\");\nlet $393e677ed3c566ae$var$clearEl = document.getElementById(\"clear\");\nlet $393e677ed3c566ae$var$statusEl = document.getElementById(\"status\");\nlet $393e677ed3c566ae$var$progressEl = document.getElementById(\"progress\");\nlet $393e677ed3c566ae$var$urlEl = document.getElementById(\"url\");\nlet $393e677ed3c566ae$var$containerEl = document.querySelector(\".container\");\nlet $393e677ed3c566ae$var$progressToolsEl = document.querySelector(\".progress-tools\");\nlet $393e677ed3c566ae$var$uploadToolsEl = document.querySelector(\".upload-tools\");\nlet $393e677ed3c566ae$var$finishToolsEl = document.querySelector(\".finish-tools\");\nfunction $393e677ed3c566ae$var$upload(file) {\n    let urlParams = new URLSearchParams(window.location.search);\n    let cloudName = urlParams.get(\"cloud_name\") || \"demo\";\n    let uploadPreset = urlParams.get(\"upload_preset\") || \"unsigned\";\n    let props = {\n        cloudName: cloudName,\n        uploadPreset: uploadPreset\n    };\n    let uplarge = (0, $91001294eca2ec6f$export$2e2bcd8739ae039)(props);\n    uplarge.uploadFile(file);\n    uplarge.on.addEventListener(\"progress\", (evt)=>{\n        $393e677ed3c566ae$var$progressEl.value = Math.round(evt.detail.percent);\n        $393e677ed3c566ae$var$statusEl.innerHTML = `${Math.round(evt.detail.percent)}%`;\n    });\n    uplarge.on.addEventListener(\"success\", (evt)=>{\n        let res = evt.detail.response;\n        let url = res.playback_url;\n        if (res.resource_type !== \"video\") url = res.secure_url;\n        $393e677ed3c566ae$var$urlEl.innerHTML = url;\n        $393e677ed3c566ae$var$urlEl.href = url;\n        $393e677ed3c566ae$var$showFinish();\n    });\n    uplarge.on.addEventListener(\"error\", (evt)=>{\n        errEl.innerHTML = `Error during the upload: [${evt.detail.status}] ${evt.detail.message}.`;\n    });\n}\n$393e677ed3c566ae$var$clearEl.addEventListener(\"click\", (e)=>{\n    if (!$393e677ed3c566ae$var$pickerEl.value) return;\n    $393e677ed3c566ae$var$pickerEl.disabled = null;\n    $393e677ed3c566ae$var$progressEl.value = 0;\n    $393e677ed3c566ae$var$statusEl.innerHTML = \"0%\";\n    $393e677ed3c566ae$var$urlEl.innerHTML = null;\n    $393e677ed3c566ae$var$urlEl.href = null;\n    $393e677ed3c566ae$var$showPicker();\n});\n$393e677ed3c566ae$var$pickerEl.addEventListener(\"input\", (e)=>{\n    $393e677ed3c566ae$var$upload($393e677ed3c566ae$var$pickerEl.files[0]);\n    $393e677ed3c566ae$var$pickerEl.disabled = \"disabled\";\n    $393e677ed3c566ae$var$showProgress();\n});\n$393e677ed3c566ae$var$containerEl.addEventListener(\"dragenter\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.add(\"active\");\n}, false);\n$393e677ed3c566ae$var$containerEl.addEventListener(\"dragleave\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.remove(\"active\");\n}, false);\n$393e677ed3c566ae$var$containerEl.addEventListener(\"dragover\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.add(\"active\");\n}, false);\n$393e677ed3c566ae$var$containerEl.addEventListener(\"drop\", (e)=>{\n    if ($393e677ed3c566ae$var$pickerEl.value) return;\n    e.preventDefault();\n    e.stopPropagation();\n    $393e677ed3c566ae$var$containerEl.classList.remove(\"active\");\n    let draggedData = e.dataTransfer;\n    $393e677ed3c566ae$var$upload(draggedData.files[0]);\n    $393e677ed3c566ae$var$showProgress();\n}, false);\nfunction $393e677ed3c566ae$var$showPicker() {\n    $393e677ed3c566ae$var$progressToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$progressToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.add(\"show\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.remove(\"hide\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.remove(\"show\");\n}\nfunction $393e677ed3c566ae$var$showProgress() {\n    $393e677ed3c566ae$var$progressToolsEl.classList.add(\"show\");\n    $393e677ed3c566ae$var$progressToolsEl.classList.remove(\"hide\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.remove(\"show\");\n}\nfunction $393e677ed3c566ae$var$showFinish() {\n    $393e677ed3c566ae$var$progressToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$progressToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.add(\"hide\");\n    $393e677ed3c566ae$var$uploadToolsEl.classList.remove(\"show\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.add(\"show\");\n    $393e677ed3c566ae$var$finishToolsEl.classList.remove(\"hide\");\n}\n\n\n//# sourceMappingURL=index.4a7216bb.js.map\n","import Uplarge from \"../src/Uplarge\";\n\nlet pickerEl = document.getElementById(\"picker\");\nlet clearEl = document.getElementById(\"clear\");\nlet statusEl = document.getElementById(\"status\");\nlet progressEl = document.getElementById(\"progress\");\nlet urlEl = document.getElementById(\"url\");\nlet containerEl = document.querySelector(\".container\");\nlet progressToolsEl = document.querySelector(\".progress-tools\");\nlet uploadToolsEl = document.querySelector(\".upload-tools\");\nlet finishToolsEl = document.querySelector(\".finish-tools\");\n\nfunction upload(file) {\n    let urlParams = new URLSearchParams(window.location.search);\n    let cloudName = urlParams.get(\"cloud_name\") || \"demo\";\n    let uploadPreset = urlParams.get(\"upload_preset\") || \"unsigned\";\n\n    let props = {\n        cloudName,\n        uploadPreset,\n    };\n    let uplarge = Uplarge(props);\n    uplarge.uploadFile(file);\n\n    uplarge.on.addEventListener(\"progress\", (evt) => {\n        progressEl.value = Math.round(evt.detail.percent);\n        statusEl.innerHTML = `${Math.round(evt.detail.percent)}%`;\n    });\n    uplarge.on.addEventListener(\"success\", (evt) => {\n        let res = evt.detail.response;\n        let url = res.playback_url;\n        if (res.resource_type !== \"video\") {\n            url = res.secure_url;\n        }\n        urlEl.innerHTML = url;\n        urlEl.href = url;\n        showFinish();\n    });\n    uplarge.on.addEventListener(\"error\", (evt) => {\n        errEl.innerHTML = `Error during the upload: [${evt.detail.status}] ${evt.detail.message}.`;\n    });\n}\n\nclearEl.addEventListener(\"click\", (e) => {\n    if (!pickerEl.value) return;\n    pickerEl.disabled = null;\n    progressEl.value = 0;\n    statusEl.innerHTML = \"0%\";\n    urlEl.innerHTML = null;\n    urlEl.href = null;\n    showPicker();\n});\n\npickerEl.addEventListener(\"input\", (e) => {\n    upload(pickerEl.files[0]);\n    pickerEl.disabled = \"disabled\";\n    showProgress();\n});\n\ncontainerEl.addEventListener(\n    \"dragenter\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.add(\"active\");\n    },\n    false\n);\n\ncontainerEl.addEventListener(\n    \"dragleave\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.remove(\"active\");\n    },\n    false\n);\n\ncontainerEl.addEventListener(\n    \"dragover\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.add(\"active\");\n    },\n    false\n);\n\ncontainerEl.addEventListener(\n    \"drop\",\n    (e) => {\n        if (pickerEl.value) return;\n        e.preventDefault();\n        e.stopPropagation();\n        containerEl.classList.remove(\"active\");\n        let draggedData = e.dataTransfer;\n        upload(draggedData.files[0]);\n        showProgress();\n    },\n    false\n);\n\nfunction showPicker() {\n    progressToolsEl.classList.add(\"hide\");\n    progressToolsEl.classList.remove(\"show\");\n    uploadToolsEl.classList.add(\"show\");\n    uploadToolsEl.classList.remove(\"hide\");\n    finishToolsEl.classList.add(\"hide\");\n    finishToolsEl.classList.remove(\"show\");\n}\n\nfunction showProgress() {\n    progressToolsEl.classList.add(\"show\");\n    progressToolsEl.classList.remove(\"hide\");\n    uploadToolsEl.classList.add(\"hide\");\n    uploadToolsEl.classList.remove(\"show\");\n    finishToolsEl.classList.add(\"hide\");\n    finishToolsEl.classList.remove(\"show\");\n}\n\nfunction showFinish() {\n    progressToolsEl.classList.add(\"hide\");\n    progressToolsEl.classList.remove(\"show\");\n    uploadToolsEl.classList.add(\"hide\");\n    uploadToolsEl.classList.remove(\"show\");\n    finishToolsEl.classList.add(\"show\");\n    finishToolsEl.classList.remove(\"hide\");\n}\n","let cloudName,\n    publicId,\n    uploadPreset,\n    chunkSize,\n    xUniqueUploadId,\n    chunkCount,\n    totalChunks,\n    file,\n    fileSize,\n    fromByte,\n    toByte,\n    percent,\n    retries,\n    retriesCount,\n    eventTarget;\n\nfunction Uplarge(props) {\n    xUniqueUploadId = +new Date();\n    publicId = (props && props.publicId) || xUniqueUploadId;\n    cloudName = (props && props.cloudName) || \"demo\";\n    uploadPreset = (props && props.uploadPreset) || \"unsigned\";\n    chunkSize = 6000000; // Bytes (must be larger than 5,000,000)\n    fromByte = 0;\n    toByte = 0;\n    chunkCount = 0;\n    retries = 3;\n    retriesCount = 0;\n    eventTarget = new EventTarget();\n    return {\n        on: eventTarget,\n        uploadFile: uploadFile,\n    };\n}\n\nfunction uploadFile(fileToUpload) {\n    if (!fileToUpload) {\n        return new TypeError(\"The file is missing\");\n    }\n    file = fileToUpload;\n    fileSize = file.size;\n    totalChunks = Math.ceil(fileSize / chunkSize);\n    processFile();\n}\n\nfunction processFile(retry = false) {\n    toByte = fromByte + parseInt(chunkSize);\n    if (toByte > fileSize) {\n        toByte = fileSize;\n    }\n    let part = file.slice(fromByte, toByte);\n    if (!retry) {\n        chunkCount++;\n    }\n    send(part, fromByte, toByte - 1, fileSize)\n        .then((res) => {\n            if (parseInt(res.status / 100) === 2) {\n                retriesCount = 0;\n                if (toByte < fileSize) {\n                    fromByte = toByte;\n                    processFile();\n                } else {\n                    percent = 100;\n                    eventTarget.dispatchEvent(\n                        new CustomEvent(\"success\", {\n                            detail: { response: JSON.parse(res.response) },\n                        })\n                    );\n                }\n            } else if (retriesCount++ <= retries) {\n                console.info(`${retriesCount} retry of chunk ${chunkCount}`);\n                processFile(true);\n            }\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n\n    function send(part, fromByte, toByte, fileSize) {\n        let formdata = new FormData();\n        formdata.append(\"file\", part);\n        formdata.append(\"upload_preset\", uploadPreset);\n        formdata.append(\"cloud_name\", cloudName);\n        formdata.append(\"public_id\", publicId);\n\n        let xhr = new XMLHttpRequest();\n\n        return new Promise(function (resolve, reject) {\n            xhr.onload = () => {\n                // Fired when an XMLHttpRequest transaction completes successfully\n                if (xhr.readyState !== 4) {\n                    return; // Only run if the request is complete (4 == Done)\n                }\n                if (parseInt(xhr.status / 100) === 2) {\n                    resolve(xhr);\n                } else {\n                    reject({\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                    });\n                }\n            };\n\n            xhr.open(\n                \"POST\",\n                `https://api.cloudinary.com/v1_1/${cloudName}/auto/upload`\n            );\n            xhr.timeout = 60 * 60 * 1000;\n            xhr.setRequestHeader(\"X-Unique-Upload-Id\", xUniqueUploadId);\n            xhr.setRequestHeader(\n                \"Content-Range\",\n                `bytes ${fromByte}-${toByte}/${fileSize}`\n            );\n            xhr.upload.onloadstart = function () {\n                // Fired when a request has started to load data\n            };\n\n            xhr.onloadend = function () {\n                // Fired when a request has been completed, whether successfully (after load) or unsuccessfully (after abort or error)\n            };\n\n            xhr.upload.onabort = function () {\n                // Fired when a request has been aborted, for example, because the program called XMLHttpRequest.abort().\n            };\n\n            xhr.upload.onprogress = function (event) {\n                // Fired periodically when a request receives more data\n                let total = Math.max(event.total, fileSize);\n                let uploaded = (chunkCount - 1) * chunkSize + event.loaded;\n                percent = (uploaded / total) * 100;\n                percent = Math.max(percent, 1); // For large we want to show progress right from the start.\n                percent = Math.min(percent, 99); // Same goes for the end 100% before finish can be misleading.\n                eventTarget.dispatchEvent(\n                    new CustomEvent(\"progress\", {\n                        detail: { percent },\n                    })\n                );\n            };\n\n            xhr.upload.ontimeout = function () {\n                // Fired when progress is terminated due to preset time expiring\n            };\n\n            xhr.upload.onerror = function (event) {\n                eventTarget.dispatchEvent(\n                    new CustomEvent(\"error\", {\n                        detail: {\n                            status: xhr.status,\n                            message: event.target.responseText,\n                        },\n                    })\n                );\n                reject({\n                    status: xhr.status,\n                    statusText: xhr.statusText,\n                });\n            };\n\n            xhr.send(formdata);\n        });\n    }\n}\n\nexport default Uplarge;\n"],"names":["$91001294eca2ec6f$var$cloudName","$91001294eca2ec6f$var$publicId","$91001294eca2ec6f$var$uploadPreset","$91001294eca2ec6f$var$chunkSize","$91001294eca2ec6f$var$xUniqueUploadId","$91001294eca2ec6f$var$chunkCount","$91001294eca2ec6f$var$file","$91001294eca2ec6f$var$fileSize","$91001294eca2ec6f$var$fromByte","$91001294eca2ec6f$var$toByte","$91001294eca2ec6f$var$percent","$91001294eca2ec6f$var$retries","$91001294eca2ec6f$var$retriesCount","$91001294eca2ec6f$var$eventTarget","$91001294eca2ec6f$var$uploadFile","fileToUpload","TypeError","size","$91001294eca2ec6f$var$processFile","retry","fromByte","toByte","formdata","xhr","parseInt","part","slice","send","FormData","append","XMLHttpRequest","Promise","resolve","reject","onload","readyState","status","statusText","open","timeout","setRequestHeader","upload","onloadstart","onloadend","onabort","onprogress","event","total","Math","max","min","uploaded","loaded","dispatchEvent","CustomEvent","detail","percent","ontimeout","onerror","message","target","responseText","then","res","response","JSON","parse","console","info","catch","error","$393e677ed3c566ae$var$pickerEl","document","getElementById","$393e677ed3c566ae$var$clearEl","$393e677ed3c566ae$var$statusEl","$393e677ed3c566ae$var$progressEl","$393e677ed3c566ae$var$urlEl","$393e677ed3c566ae$var$containerEl","querySelector","$393e677ed3c566ae$var$progressToolsEl","$393e677ed3c566ae$var$uploadToolsEl","$393e677ed3c566ae$var$finishToolsEl","$393e677ed3c566ae$var$upload","file","props","urlParams","URLSearchParams","window","location","search","uplarge","cloudName","get","uploadPreset","Date","publicId","on","EventTarget","uploadFile","addEventListener","evt","value","round","innerHTML","url","playback_url","resource_type","secure_url","href","classList","add","remove","errEl","$393e677ed3c566ae$var$showProgress","e","disabled","files","preventDefault","stopPropagation","draggedData","dataTransfer"],"version":3,"file":"index.4a7216bb.js.map"}